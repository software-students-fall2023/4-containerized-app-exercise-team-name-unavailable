name: CI/CD

on:
  push:
    branches:
      - "*"

jobs:
  build_web_app:
    runs-on: ubuntu-latest
    needs: test_web_app
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
    
      - name: Build and push Docker image
        run: |
          # To reference the latest on a non-trunk branch, use web-app:latest.sanitized_ref
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker buildx build --push --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/web-app:$(date +%s) --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/web-app:${{ github.sha }} --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/web-app:latest --file ./web-app/Dockerfile .
          else
            # In a separate variable, replace all special characters in ${{ github.ref }} (except '-' and '.') with '_', and remove the 'refs/heads/' prefix
            sanitized_ref=$(echo "${{ github.ref }}" | sed -E 's/[^a-zA-Z0-9_.-]+/_/g' | sed -E 's/^refs_heads_//g')
            docker buildx build --push --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/web-app:$(date +%s) --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/web-app:${{ github.sha }} --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/web-app:latest.$sanitized_ref --file ./web-app/Dockerfile .
          fi
  test_web_app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Run tests
        run: |
          python -m pip install pipenv
          pipenv install
          cd web-app
          pipenv run pytest -p no:warnings
  build_ml:
    runs-on: ubuntu-latest
    needs: test_ml
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        run: |
          # To reference the latest on a non-trunk branch, use machine-learning-client:latest.sanitized_ref
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker buildx build --push --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/machine-learning-client:$(date +%s) --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/machine-learning-client:${{ github.sha }} --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/machine-learning-client:latest --file ./machine-learning-client/Dockerfile .
          else
            # In a separate variable, replace all special characters in ${{ github.ref }} (except '-' and '.') with '_', and remove the 'refs/heads/' prefix
            sanitized_ref=$(echo "${{ github.ref }}" | sed -E 's/[^a-zA-Z0-9_.-]+/_/g' | sed -E 's/^refs_heads_//g')
            if [[ -n $(git diff --name-only ${{ github.sha }} HEAD -- ./machine-learning-client) ]]; then
              docker buildx build --push --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/machine-learning-client:$(date +%s) --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/machine-learning-client:${{ github.sha }} --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/machine-learning-client:latest.$sanitized_ref --file ./machine-learning-client/Dockerfile .
            else
              echo "No changes in /machine-learning-client directory. Skipping Docker build and push."
            fi
          fi
  test_ml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Run tests
        run: |
          python -m pip install pipenv
          pipenv install
          cd machine-learning-client
          sudo mkdir /certs
          sudo touch /certs/.env
          sudo chmod 777 /certs/.env
          sudo echo "MONGO_USERNAME=test_user" >> /certs/.env
          sudo echo "MONGO_PASSWORD=test_password" >> /certs/.env
          pipenv run pytest -p no:warnings
  deploy:
    runs-on: ubuntu-latest
    needs: [build_web_app, build_ml]
    steps:
      - name: Run redeploy script
        run: |
          # Check that this commit was to main
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > key
            chmod 600 key
            # Tell server at root@unavailable.duckdns.org to run the script at /root/CD.sh
            ssh -i key -o StrictHostKeyChecking=no root@unavailable.duckdns.org '/root/CD.sh'
          else
            echo "Not on main branch. Skipping deployment."
          fi